Add comments to code

Add unit tests

Resolver

Consider errors:

    Throw Runtime errors everywhere, and give the Albion a way to throw and catch them
        vs.
    Encode error information in nil, and let nil be used everywhere without throwing
        vs.
    Some combination, with certain operations throwing and others using nil

    I'm inclined to stick to one option for simplicity, and I somewhat prefer the second. I will
    need a syntax for assigning and accessing error information to/from nil.

    Also need to consider what this should do:
        undefined_variable.undefined_function;
    This type of thing you probably want to fail, so maybe runtime errors should be kept and only
    thrown by the interpreter, reserved for errors that involve undefined variables and other
    critical program deficiencies.

Comma at the end of tuples, not beginning

    var t = 1,;

Conditional declaration

    var x|double, s|string;
    x = "str";  // RunTimeError

Make definition not alter the value if previously defined

Default values (need to pick a syntax for @)

    var x, y@1 = 42,;

Types

    type T {
        x|double@0,
        y|double@0,
        s|string@""
    };

    // This creates a type T, a checking function T, and a constructor T
    // (I may need a way to differentiate these)
    var t|T = .T;
    var u|T = 1, 2, "string" -> T;

    u:x = 42;
    u:x.print;

Concatenation operator for tuples

    (1, 2) ++ (3, 4) == (1, 2, 3, 4);
    1 ++ (2, 3) == (1, 2, 3);
    (1, 2) ++ 3 == (1, 2, 3);

Possibly add easier way to add a function than the following:

    var sort;
    sort = sort ++ fun {};

Function overloading

    // Let's add another constructor for T
    T = T ++ fun s|string { return (42, 42, s).T; };

Add object dereferencing

    var x = 3;
    var y = x;
    *y = *4;  // x is now 4

Lists
    
    var l = [1, 2, 3];
    l + [4, 5, 6] -> print;

Modules

Private data

    type T {
        z|string@"hey",
        private x|double@0, y@nil;
    };

    // The <T> syntax allows access to private data
    // Only allow these in the same module
    print = print + fun<T> t|T { t:z, t:x, t:y -> print; };

Dictionaries
